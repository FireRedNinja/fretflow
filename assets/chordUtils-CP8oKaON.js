import{g as O,I as A}from"./intervalUtils-bYTG8tbd.js";import{N as C,g as N,S as f}from"./musicUtils-Bffn_pRB.js";var I=(t=>(t[t.ROOT=0]="ROOT",t[t.FIRST=1]="FIRST",t[t.SECOND=2]="SECOND",t))(I||{}),$=(t=>(t.DROP_2="Drop 2",t.DROP_3="Drop 3",t))($||{});const R={major:{name:"Major Triad",abbr:["","maj","M"],intervals:["P1","M3","P5"]},minor:{name:"Minor Triad",abbr:["m","min","-"],intervals:["P1","m3","P5"]},diminished:{name:"Diminished Triad",abbr:["dim","°"],intervals:["P1","m3","TT"]},augmented:{name:"Augmented Triad",abbr:["aug","+"],intervals:["P1","M3","m6"]},major7:{name:"Major Seventh",abbr:["maj7","M7","Δ"],intervals:["P1","M3","P5","M7"]},minor7:{name:"Minor Seventh",abbr:["m7","min7","-7"],intervals:["P1","m3","P5","m7"]},dominant7:{name:"Dominant Seventh",abbr:["7","dom7"],intervals:["P1","M3","P5","m7"]},minor7flat5:{name:"Minor Seventh Flat Five",abbr:["m7b5","ø","ø7"],intervals:["P1","m3","TT","m7"]},diminished7:{name:"Diminished Seventh",abbr:["dim7","°7"],intervals:["P1","m3","TT","M6"]},sus4:{name:"Suspended Fourth",abbr:["sus4","sus"],intervals:["P1","P4","P5"]},sus2:{name:"Suspended Second",abbr:["sus2"],intervals:["P1","M2","P5"]}},U=Object.values(R),T=(t,n)=>{const r=t.toUpperCase();if(C.indexOf(r)===-1)return console.error(`Invalid root note: ${t}`),null;const e=[];for(const o of n.intervals){const a=A[o];if(!a)return console.error(`Invalid interval key '${o}'`),null;const i=O(r,a);if(i)e.push(i);else return console.error(`Failed calc for interval ${o}`),null}return{rootNote:r,quality:n,notes:e}},x=(t,n)=>{if(t.notes.length!==3)return null;const[r,s,e]=t.notes;switch(n){case 0:return[r,s,e];case 1:return[s,e,r];case 2:return[e,r,s];default:return null}},F=t=>{if(t.notes.length!==4)return null;const[n,r,s,e]=t.notes;return[s,n,r,e]},j=t=>{if(t.notes.length!==4)return null;const[n,r,s,e]=t.notes;return[r,n,s,e]},k=(t,n,r)=>{const s=n.abbr[0]??"",e=`${t}${s}`;if(r===void 0||r===0)return e;const o=T(t,n);if(!o||o.notes.length!==3)return e;let a;return r===1?a=o.notes[1]:r===2&&(a=o.notes[2]),a?`${e}/${a}`:e},v=(t,n)=>{const s={5:40,4:45,3:50,2:55,1:59,0:64}[t];return s===void 0?(console.error("Invalid visual string index for absolute pitch:",t),-1):s+n},H=(t,n,r,s=12)=>{let e=null,o=0;if(n===0||n===1||n===2)e=x(t,n),o=3;else if(n==="Drop 2")e=F(t),o=4;else if(n==="Drop 3")e=j(t),o=4;else if(n==="Root Position")e=t.notes,o=t.notes.length;else return console.error("Unsupported voicing type for findVoicingOnStrings:",n),null;if(!e)return null;if(e.length!==o)return console.error(`Expected ${o} notes for voicing ${n}, but got ${e.length}`),null;if(r.length!==o)return console.warn(`Number of strings (${r.length}) does not match number of notes (${o}) for voicing ${n}. Cannot map directly.`),null;const a=[...r].sort((i,u)=>u-i);for(let i=0;i<=s;i++){const u=a[0],p=e[0],D=f.length-1-u;if(N(f[D],i)!==p)continue;const d=[{string:u,fret:i}];let g=!0,h=v(u,i);for(let l=1;l<o;l++){const m=e[l],b=a[l],M=f.length-1-b;let P=!1;for(let c=0;c<=s;c++)if(N(f[M],c)===m){const S=v(b,c);if(S>h){d.push({string:b,fret:c}),h=S,P=!0;break}}if(!P){g=!1;break}}if(g)return d.sort((l,m)=>l.string-m.string)}return null};export{U as C,$ as D,I as T,x as a,F as b,j as c,k as d,R as e,H as f,T as g};
